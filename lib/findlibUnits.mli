(*
 * Copyright (c) 2014 David Sheets <sheets@alum.mit.edu>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *)

(** [FindlibUnits] provides compilation unit inference queries for
    findlib packages. *)

(** {3 Types} *)

(** A basic map with string keys *)
module Map : Map.S with type key = string

(** A basic set of strings *)
module Set : Set.S with type elt = string

(** A snapshot of some findlib state *)
type state = {
  sublibraries_of_package : Set.t Map.t;
  packages_of_dir         : Set.t Map.t;
}

(** The source of the inference that a unit belongs to a findlib package *)
type source =
| Archive of string
| Meta
| Path

(** An identified compilation unit *)
type u = {
  name   : string; (** The name of the module the compilation unit represents *)
  path   : string; (** The path where the compilation unit is found *)
  cmi    : string; (** The filename of the cmi containing the unit *)
  source : source; (** The means by which the unit's membership was inferred *)
}

(** A map from findlib package names to unit names to units *)
type t = u Map.t Map.t

(** {3 Queries}
    
    {b Note:} if multiple top-level packages share an installation
    directory, only those units which can be found through archives or
    META files are included and no paths will be searched. This means
    that these queries may miss certain units such as those that
    describe module interfaces with only types and lack [.ml]
    implementations. In the case of subpackages, loose [.cmi] files
    are associated to the top-level package.
*)

(** [state ()] is a snapshot of some of the current findlib state. *)
val state : unit -> state

(** [of_package_only state name] is a map of unit names to units for a
    findlib package. A {!type:state} value is required to disambiguate
    packages that share the same directory. *)
val of_package_only : state -> string -> u Map.t

(** [of_package state name] is a map of findlib package names to unit
    names to units.  All packages with [name] as self or an ancestor
    are included with their full names. The subpackage search is based
    on [state] which may be generated by {!val:state}.
*)
val of_package : state -> string -> t

(** [all state] is a map of findlib packages to unit names to units. *)
val all : state -> t
